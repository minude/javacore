(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{483:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"深入理解-java-string-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入理解-java-string-类型"}},[t._v("#")]),t._v(" 深入理解 Java String 类型")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("📦 本文以及示例源码已归档在 "),s("a",{attrs:{href:"https://github.com/dunwu/javacore/",target:"_blank",rel:"noopener noreferrer"}},[t._v("javacore"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("String 类型可能是 Java 中应用最频繁的引用类型，但它的性能问题却常常被忽略。高效的使用字符串，可以提升系统的整体性能。当然，要做到高效使用字符串，需要深入了解其特性。")])]),t._v(" "),s("p",[t._v("思考题：结果是什么？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('String str1= "abc";\nString str2= new String("abc");\nString str3= str2.intern();\nassertSame(str1==str2);\nassertSame(str2==str3);\nassertSame(str1==str3)\n')])])]),s("h2",{attrs:{id:"string-的不可变性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-的不可变性"}},[t._v("#")]),t._v(" String 的不可变性")]),t._v(" "),s("p",[t._v("我们先来看下 "),s("code",[t._v("String")]),t._v(" 的定义：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** The value is used for character storage. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("String")]),t._v(" 类被 "),s("code",[t._v("final")]),t._v(" 关键字修饰，表示"),s("strong",[t._v("不可继承 "),s("code",[t._v("String")]),t._v(" 类")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("String")]),t._v(" 类的数据存储于 "),s("code",[t._v("char[]")]),t._v(" 数组，这个数组被 "),s("code",[t._v("final")]),t._v(" 关键字修饰，表示 "),s("strong",[s("code",[t._v("String")]),t._v(" 对象不可被更改")]),t._v("。")]),t._v(" "),s("p",[t._v("为什么 Java 要这样设计？")]),t._v(" "),s("p",[t._v("（1）"),s("strong",[t._v("保证 String 对象安全性")]),t._v("。避免 String 被篡改。")]),t._v(" "),s("p",[t._v("（2）"),s("strong",[t._v("保证 hash 值不会频繁变更")]),t._v("。")]),t._v(" "),s("p",[t._v("（3）"),s("strong",[t._v("可以实现字符串常量池")]),t._v("。通常有两种创建字符串对象的方式，一种是通过字符串常量的方式创建，如 "),s("code",[t._v('String str="abc";')]),t._v(" 另一种是字符串变量通过 new 形式的创建，如 "),s("code",[t._v('String str = new String("abc")')]),t._v("。")]),t._v(" "),s("p",[t._v("使用第一种方式创建字符串对象时，JVM 首先会检查该对象是否在字符串常量池中，如果在，就返回该对象引用，否则新的字符串将在常量池中被创建。这种方式可以减少同一个值的字符串对象的重复创建，节约内存。")]),t._v(" "),s("p",[s("code",[t._v('String str = new String("abc")')]),t._v(" 这种方式，首先在编译类文件时，"),s("code",[t._v('"abc"')]),t._v(" 常量字符串将会放入到常量结构中，在类加载时，"),s("code",[t._v('"abc"')]),t._v(" 将会在常量池中创建；其次，在调用 new 时，JVM 命令将会调用 "),s("code",[t._v("String")]),t._v(" 的构造函数，同时引用常量池中的 "),s("code",[t._v('"abc"')]),t._v("  字符串，在堆内存中创建一个 "),s("code",[t._v("String")]),t._v(" 对象；最后，str 将引用 "),s("code",[t._v("String")]),t._v(" 对象。")]),t._v(" "),s("h2",{attrs:{id:"string-的优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-的优化"}},[t._v("#")]),t._v(" String 的优化")]),t._v(" "),s("h3",{attrs:{id:"字符串拼接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串拼接"}},[t._v("#")]),t._v(" 字符串拼接")]),t._v(" "),s("p",[t._v("如果需要使用"),s("strong",[t._v("字符串拼接，应该优先考虑 "),s("code",[t._v("StringBuilder")]),t._v(" 或 "),s("code",[t._v("StringBuffer")]),t._v("（线程安全） 的 "),s("code",[t._v("append")]),t._v(" 方法替代使用 "),s("code",[t._v("+")]),t._v(" 号")]),t._v("。")]),t._v(" "),s("p",[t._v("【示例】错误示例")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('String str= "ab" + "cd" + "ef";\n')])])]),s("p",[t._v("程序会先生成 ab 对象，再生成 abcd 对象，最后生成 abcdef 对象。")]),t._v(" "),s("p",[t._v("即使使用 "),s("code",[t._v("+")]),t._v(" 号作为字符串的拼接，也一样可以被编译器优化成 "),s("code",[t._v("StringBuilder")]),t._v(" 的方式。但再细致些，你会发现在编译器优化的代码中，每次循环都会生成一个新的 "),s("code",[t._v("StringBuilder")]),t._v(" 实例，同样也会降低系统的性能。")]),t._v(" "),s("h3",{attrs:{id:"如何使用-string-intern-节省内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-string-intern-节省内存"}},[t._v("#")]),t._v(" 如何使用 String.intern 节省内存")]),t._v(" "),s("p",[t._v("在每次赋值的时候使用 "),s("code",[t._v("String")]),t._v(" 的 "),s("code",[t._v("intern")]),t._v(" 方法，如果常量池中有相同值，就会重复使用该对象，返回对象引用，这样一开始的对象就可以被回收掉。")]),t._v(" "),s("p",[t._v("在字符串常量中，默认会将对象放入常量池；在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，复制到堆内存对象中，并返回堆内存对象引用。")]),t._v(" "),s("p",[t._v("如果调用 intern 方法，会去查看字符串常量池中是否有等于该对象的字符串，如果没有，就在常量池中新增该对象，并返回该对象引用；如果有，就返回常量池中的字符串引用。堆内存中原有的对象由于没有引用指向它，将会通过垃圾回收器回收。")]),t._v(" "),s("p",[t._v("【示例】")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SharedLocation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" city"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" region"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" countryCode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SharedLocation")]),t._v(" sharedLocation "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SharedLocation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsharedLocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("messageInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\tsharedLocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCountryCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("messageInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRegion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsharedLocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRegion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("messageInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCountryCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://item.jd.com/10058164.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Java 编程思想（Thinking in java）》"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://item.jd.com/12759308.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Java 核心技术 卷 I 基础知识》"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/59cd71835188255d3448faf6",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java基本数据类型和引用类型"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/dolphin0520/p/3780005.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入剖析 Java 中的装箱和拆箱"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);